package br.com.aliz.organizacao.service;

import java.io.IOException;
import java.net.URISyntaxException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import br.com.aliz.organizacao.<%= name.capitalize %>;
import br.com.aliz.organizacao.business.<%= name.capitalize %>Business;
import br.com.aliz.organizacao.dto.<%= name.capitalize %>DTO;
import br.com.aliz.organizacao.dto.<%= name.capitalize %>FiltroDTO;
import br.com.aliz.translator.<%= name.capitalize %>Translator;
import br.com.jexperts.dto.ResponseObject;
import br.com.jexperts.exception.ValidationException;
import br.com.jexperts.translator.Translators;

@Service
@Transactional
public class <%= name.capitalize %>Service {
    
    @Autowired
    private <%= name.capitalize %>Business <%= name %>Business;
    
    public ResponseObject<<%= name.capitalize %>DTO> get<%= name.capitalize %>s(<%= name.capitalize %>FiltroDTO filtro) {
        List<<%= name.capitalize %>> <%= name %>s = <%= name %>Business.get<%= name.capitalize %>s(filtro);
        
        ResponseObject<<%= name.capitalize %>DTO> resposta = new ResponseObject<<%= name.capitalize %>DTO>();
        
        resposta.setTotal(<%= name %>Business.countGet<%= name.capitalize %>s(filtro));

        resposta.setResponseList(new <%= name.capitalize %>Translator().toDto(<%= name %>s));

        return resposta;
    }
    
    @Transactional(readOnly = false)
    public void remover(<%= name.capitalize %>DTO <%= name %>) throws ValidationException {
        <%= name %>Business.remover(<%= name %>.getId());
    }

    public <%= name.capitalize %>DTO get<%= name.capitalize %>(Long id<%= name.capitalize %>) {
        return (<%= name.capitalize %>DTO) Translators.toDto(<%= name %>Business.get<%= name.capitalize %>(id<%= name.capitalize %>));
    }
    
    public <%= name.capitalize %>DTO salvar(<%= name.capitalize %>DTO <%= name %>) throws ValidationException, IOException, URISyntaxException {
        <%= name.capitalize %> result = <%= name %>Business.salvar((<%= name.capitalize %>) Translators.toEntity(<%= name %>));
        return (<%= name.capitalize %>DTO) Translators.toDto(result);
    }

    /**
     * Método responsável por validar o passo 1 do {@link <%= name.capitalize %>}.
     * 
     * @param <%= name %>DTO o {@link <%= name.capitalize %>} a ser validado
     * @throws ValidationException caso ocorra algum erro de validação
     */
    public void validaStep1(<%= name.capitalize %>DTO <%= name %>DTO) throws ValidationException {
        <%= name.capitalize %>Translator tradutor = new <%= name.capitalize %>Translator();

        <%= name.capitalize %> <%= name %> = tradutor.toEntity(<%= name %>DTO);

        <%= name %>Business.validaStep1(<%= name %>);
    }
    
}
