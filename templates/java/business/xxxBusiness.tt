package br.com.aliz.<%= packege %>.business;

import java.io.IOException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Expression;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.security.access.prepost.PostAuthorize;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Component;

import br.com.aliz.<%= packege %>.<%= name.capitalize %>;
import br.com.aliz.<%= packege %>.<%= name.capitalize %>Desativacao;
import br.com.aliz.<%= packege %>.Situacao<%= name.capitalize %>;
import br.com.aliz.<%= packege %>.dto.<%= name.capitalize %>FiltroDTO;
import br.com.jexperts.control.annotation.RQ;
import br.com.jexperts.exception.Validation;
import br.com.jexperts.exception.ValidationException;
import br.com.jexperts.message.Message;
import br.com.jexperts.util.StringUtils;

@Component
public class <%= name.capitalize %>Business {
    
    @PersistenceContext
    private EntityManager em;

    @PostAuthorize("hasPermission(returnObject, '<%= name.upcase %>.VISUALIZAR')")
    public <%= name.capitalize %> get<%= name.capitalize %>(Long id<%= name.capitalize %>) {
        return em.find(<%= name.capitalize %>.class, id<%= name.capitalize %>);
    }
    
    @PreAuthorize("hasPermission(null, '<%= name.upcase %>.VISUALIZAR')")
    public Long countGet<%= name.capitalize %>s(<%= name.capitalize %>FiltroDTO filtro) {
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<Long> cq = cb.createQuery(Long.class);
        Root<<%= name.capitalize %>> from = cq.from(<%= name.capitalize %>.class);

        aplicaFiltroGet<%= name.capitalize %>s(cb, cq, from, filtro);

        Expression<Long> count = cb.count(from);
        cq.select(count);

        return em.createQuery(cq).getSingleResult();
    }
    
    @PreAuthorize("hasPermission(null, '<%= name.upcase %>.VISUALIZAR')")
    public List<<%= name.capitalize %>> get<%= name.capitalize %>s(<%= name.capitalize %>FiltroDTO filtro) {
        CriteriaBuilder cb = em.getCriteriaBuilder();

        CriteriaQuery<<%= name.capitalize %>> criteria = cb.createQuery(<%= name.capitalize %>.class);
        Root<<%= name.capitalize %>> from = criteria.from(<%= name.capitalize %>.class);

        criteria.select(from);

        aplicaFiltroGet<%= name.capitalize %>s(cb, criteria, from, filtro);

        criteria.orderBy(cb.asc(from.get("nome")));

        TypedQuery<<%= name.capitalize %>> createQuery = em.createQuery(criteria);
        createQuery.setHint("org.hibernate.cacheable", true);
        return createQuery.setFirstResult(filtro.getOffset()).setMaxResults(filtro.getLimit()).getResultList();
    }
    
    private void aplicaFiltroGet<%= name.capitalize %>s(CriteriaBuilder cb, CriteriaQuery<?> criteria, Root<?> from, <%= name.capitalize %>FiltroDTO filtro) {
        Predicate and = cb.conjunction();

        if (!StringUtils.isEmpty(filtro.getNome())) {
            Predicate titulo = cb.like(cb.upper(from.<String> get("nome")), "%" + filtro.getNome().toUpperCase() + "%");
            and.getExpressions().add(titulo);
        }

        criteria.where(and);
    }
    
    @RQ("ALIZ_002_2014:RQ0036")
    @PreAuthorize("hasPermission(null, '<%= name.upcase %>.REMOVER')")
    public void remover(Long id<%= name.capitalize %>) throws ValidationException {
        <%= name.capitalize %> <%= name %> = em.find(<%= name.capitalize %>.class, id<%= name.capitalize %>);
        em.remove(<%= name %>);
    }


    @RQ("ALIZ_001_2014:RQ0036")
    @PreAuthorize("hasPermission(null, '<%= name.upcase %>.EDITAR')")
    public <%= name.capitalize %> salvar(<%= name.capitalize %> <%= name %>) throws ValidationException, IOException, URISyntaxException {
        validar(<%= name %>);
        if (<%= name %>.getId() == null) {
            em.persist(<%= name %>);
            return <%= name %>;
        } else {
            return em.merge(<%= name %>);
        }
    }
    
    private void validar(<%= name.capitalize %> <%= name %>) throws ValidationException {
        List<Message> validations = new ArrayList<>();
        
        if (StringUtils.isEmpty(<%= name %>.getNome())) {
            validations.add(new Validation("<%= name %>.mensagem.nome.obrigatorio"));
        }
         
        if (validations.size() > 0) {
            throw new ValidationException(validations);
        }
        
    }

    /**
     * 
     * MÃ©todo responsavel por desativar <%= name %>.
     * 
     * @param id<%= name.capitalize %> id do <%= name %>.
     * @throws ValidationException
     */
    @RQ("ALIZ_002_2014:RQ0013")
    @PreAuthorize("hasPermission(#id<%= name.capitalize %>, '<%= name.upcase %>.EDITAR')")
    public void desativar(Long id<%= name.capitalize %>) throws ValidationException {
        <%= name.capitalize %> <%= name %> = get<%= name.capitalize %>(id<%= name.capitalize %>);
        <%= name %>.setSituacao<%= name.capitalize %>(Situacao<%= name.capitalize %>.DESATIVADO);
        <%= name.capitalize %>Desativacao <%= name %>Desativacao = new <%= name.capitalize %>Desativacao();
        <%= name %>Desativacao.set<%= name.capitalize %>(<%= name %>);
        <%= name %>Desativacao.setData(new Date());
        <%= name %>.setDesativacao(<%= name %>Desativacao);
        em.merge(<%= name %>);
    }
}
